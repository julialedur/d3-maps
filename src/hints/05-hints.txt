It's basically the same as map number 4.

But remember to check your json layer name!









You're reading in multiple files, which means the whole Promise.all thing...










...and the change to 'ready', too.









And be sure you're reading in your json with d3.json and csv with d3.csv




















When you have your dots and you're transforming them into the right place, be sure you use [] with your longitude and latitude! It takes a list!









Some of them are outside of your map, so they'll give you an error when you try to project them - you can try to filter them out, or you can just ignore the error.














We've been using scaleSequential + an interpolator a lot recently. If you're lazy you can do the same sort of thing with an ordinal scale - https://github.com/d3/d3-scale-chromatic/blob/master/README.md













'PrimSource' is the primary source of electricity, 'Total_MW' is the total output in megawatts



Watch your capitalization!















A
CIRCLE'S
RADIUS
IS
NOT
A
LINEAR
SCALE






















You have 50 states. Why do you have 50 states? Because you have 50 state features. You need 50 state labels, so...

















How do you position them?!



















If you have a feature, you can use path.centroid to get the center of it











path.centroid(d)










remember you don't use normal column names with geo/topojson files when using the data, use console.log to see what your stuff looks like

















A secret trick to get a text outline is this:

    .style('text-shadow', '-1px -1px 0 #fff, 1px -1px 0 #fff, -1px 1px 0 #fff, 1px 1px 0 #fff')

It puts four text shadows around the text, and it looks like an outline!













Put your scale in a g by itself! It's basically small multiples. You can get a list of your power plant categories with colorScale.domain()










Actually, honestly, truly - you should probably put each circle + label in its own group so you can position them both at the same time.









Start by putting them all in the same place. For each of them, add a circle of however many pixels and a text label that says the name of the category. Use console.log(d) to see what your data is.












Then color the circle



















Then position them using transform, evenly spacing them out - you'll probably want a scaleBand to help you with that! You'll want to set it up just before you draw the legend, so you're sure you know all of your power plant categories.


This will probably screw up your map! You can fix it by running this before you draw your map:

     projection.fitSize([width, height], states)

it'll resize the projection automatically. I guess you could fool around with projections options, but... this is easier.








If the lack of capitalization is killing you, use this:

    d.charAt(0).toUpperCase() + d.slice(1)
